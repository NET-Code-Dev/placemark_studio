import 'package:equatable/equatable.dart';
import '../../core/enums/geometry_type.dart';
import '../../core/enums/export_format.dart';

class KmlGenerationOptions extends Equatable {
  final GeometryType geometryType;
  final ExportFormat exportFormat;
  final String? outputPath;
  final bool includeElevation;
  final bool includeDescription;
  final bool includeImages;
  final String defaultIconStyle;
  final Map<String, StyleRule> styleRules;
  final bool useCustomIcons;
  final String documentName;
  final String documentDescription;

  const KmlGenerationOptions({
    this.geometryType = GeometryType.point,
    this.exportFormat = ExportFormat.kml,
    this.outputPath,
    this.includeElevation = true,
    this.includeDescription = true,
    this.includeImages = false,
    this.defaultIconStyle =
        'http://maps.google.com/mapfiles/kml/pushpin/ylw-pushpin.png',
    this.styleRules = const {},
    this.useCustomIcons = false,
    this.documentName = 'Converted from CSV',
    this.documentDescription =
        'Generated by Placemark Studio CSV to KML Converter',
  });

  KmlGenerationOptions copyWith({
    GeometryType? geometryType,
    ExportFormat? exportFormat,
    String? outputPath,
    bool? includeElevation,
    bool? includeDescription,
    bool? includeImages,
    String? defaultIconStyle,
    Map<String, StyleRule>? styleRules,
    bool? useCustomIcons,
    String? documentName,
    String? documentDescription,
  }) {
    return KmlGenerationOptions(
      geometryType: geometryType ?? this.geometryType,
      exportFormat: exportFormat ?? this.exportFormat,
      outputPath: outputPath ?? this.outputPath,
      includeElevation: includeElevation ?? this.includeElevation,
      includeDescription: includeDescription ?? this.includeDescription,
      includeImages: includeImages ?? this.includeImages,
      defaultIconStyle: defaultIconStyle ?? this.defaultIconStyle,
      styleRules: styleRules ?? this.styleRules,
      useCustomIcons: useCustomIcons ?? this.useCustomIcons,
      documentName: documentName ?? this.documentName,
      documentDescription: documentDescription ?? this.documentDescription,
    );
  }

  @override
  List<Object?> get props => [
    geometryType,
    exportFormat,
    outputPath,
    includeElevation,
    includeDescription,
    includeImages,
    defaultIconStyle,
    styleRules,
    useCustomIcons,
    documentName,
    documentDescription,
  ];
}

class StyleRule extends Equatable {
  final String columnName;
  final String columnValue;
  final String iconUrl;
  final String color;
  final double scale;

  const StyleRule({
    required this.columnName,
    required this.columnValue,
    required this.iconUrl,
    this.color = 'ff0000ff', // Default red color in KML format
    this.scale = 1.0,
  });

  @override
  List<Object?> get props => [columnName, columnValue, iconUrl, color, scale];
}
