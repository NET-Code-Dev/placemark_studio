import '../../core/enums/geometry_type.dart';

class StyleRule {
  final String columnName;
  final String columnValue;
  final String color;
  final String iconUrl;

  const StyleRule({
    required this.columnName,
    required this.columnValue,
    required this.color,
    required this.iconUrl,
  });

  StyleRule copyWith({
    String? columnName,
    String? columnValue,
    String? color,
    String? iconUrl,
  }) {
    return StyleRule(
      columnName: columnName ?? this.columnName,
      columnValue: columnValue ?? this.columnValue,
      color: color ?? this.color,
      iconUrl: iconUrl ?? this.iconUrl,
    );
  }

  @override
  String toString() {
    return 'StyleRule(column: $columnName, value: $columnValue, color: $color)';
  }
}

class KmlGenerationOptions {
  final String documentName;
  final String documentDescription;
  final GeometryType geometryType;
  final bool includeElevation;
  final bool includeDescription;
  final bool useCustomIcons;
  final Map<String, StyleRule> styleRules;
  final String? outputPath;

  const KmlGenerationOptions({
    this.documentName = 'Converted from CSV',
    this.documentDescription = 'Generated by Placemark Studio',
    this.geometryType = GeometryType.point,
    this.includeElevation = true,
    this.includeDescription = true,
    this.useCustomIcons = false,
    this.styleRules = const {},
    this.outputPath,
  });

  /// Factory for default options
  factory KmlGenerationOptions.defaults() {
    return const KmlGenerationOptions();
  }

  /// Factory for point-only options
  factory KmlGenerationOptions.pointsOnly({
    String? documentName,
    String? outputPath,
  }) {
    return KmlGenerationOptions(
      documentName: documentName ?? 'CSV Points',
      geometryType: GeometryType.point,
      includeElevation: true,
      includeDescription: true,
      useCustomIcons: false,
      outputPath: outputPath,
    );
  }

  KmlGenerationOptions copyWith({
    String? documentName,
    String? documentDescription,
    GeometryType? geometryType,
    bool? includeElevation,
    bool? includeDescription,
    bool? useCustomIcons,
    Map<String, StyleRule>? styleRules,
    String? outputPath,
  }) {
    return KmlGenerationOptions(
      documentName: documentName ?? this.documentName,
      documentDescription: documentDescription ?? this.documentDescription,
      geometryType: geometryType ?? this.geometryType,
      includeElevation: includeElevation ?? this.includeElevation,
      includeDescription: includeDescription ?? this.includeDescription,
      useCustomIcons: useCustomIcons ?? this.useCustomIcons,
      styleRules: styleRules ?? this.styleRules,
      outputPath: outputPath ?? this.outputPath,
    );
  }

  /// Get summary of options for display
  Map<String, dynamic> get summary => {
    'documentName': documentName,
    'geometryType': geometryType.displayName,
    'includeElevation': includeElevation,
    'includeDescription': includeDescription,
    'useCustomIcons': useCustomIcons,
    'styleRulesCount': styleRules.length,
    'hasOutputPath': outputPath != null,
  };

  @override
  String toString() {
    return 'KmlGenerationOptions(name: $documentName, type: ${geometryType.displayName})';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is KmlGenerationOptions &&
        other.documentName == documentName &&
        other.documentDescription == documentDescription &&
        other.geometryType == geometryType &&
        other.includeElevation == includeElevation &&
        other.includeDescription == includeDescription &&
        other.useCustomIcons == useCustomIcons &&
        other.outputPath == outputPath;
  }

  @override
  int get hashCode {
    return Object.hash(
      documentName,
      documentDescription,
      geometryType,
      includeElevation,
      includeDescription,
      useCustomIcons,
      outputPath,
    );
  }
}
